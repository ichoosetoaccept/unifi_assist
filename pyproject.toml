[project]
name = "unifi-assist"
version = "0.1.0"
description = "UniFi Network Application Assistant"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.11.11",
    "pydantic>=2.10.5",
    "python-dotenv>=1.0.1",
    "structlog>=25.1.0",
]

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "python-semantic-release>=9.16.1",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["src/unifi_assist"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Paths to check
files = ["src", "scripts", "tests"]

[tool.semantic_release]
version_variables = ["src/unifi_assist/__init__.py:__version__"]
commit_message = "chore: release v{version}"
commit_parser = "angular"
branch = "main"
upload_to_pypi = false
upload_to_release = true

[tool.semantic_release.changelog]
# Create/update a CHANGELOG.md file
changelog_file = "CHANGELOG.md"
# Use Markdown format
output_format = "md"
# Don't show a generic message for first release
mask_initial_release = false
# Initialize changelog from scratch each time
mode = "init"
